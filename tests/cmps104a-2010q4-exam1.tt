CMPS-104A · Compiler Design I · Fall 2010 · Test #1        page 1 of 1
$Id: cmps104a-2010q4-exam1.mm,v 1.71 2010-10-21 16:46:03-07 - - $

.PS
examboxes(3)
.PE

No books;  No calculator;  No computer;  No email;  No internet;  No
notes;  No phone.  Neatness counts!  Do your scratch work elsewhere
and enter only your final answer into the spaces provided.

.EQ
delim $$
.EN

 1. Draw an abstract syntax tree for each of the following C
    expresions.  [3pt]

    +--------------------+---------------------+---------------------+
    |   a * b + c * d    |    a + b * c + d    |  (a + b + (c + d))  |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    |                    |                     |                     |
    +--------------------+---------------------+---------------------+

 2. What two things a permitted in an NFA that are not permitted in a
    DFA?  State each and show a small FA as an example of each.  [2pt]

 3. Using the minimum possible number of states, draw deterministic
    finite automata for the following flex regular expressions.  [5pt]

     (i) xy*|cd

    (ii) (a|b)+y+

    (iii) ab|c*

    (iv) ab+cd|e

     (v) a?b?c?

 4. The following NFA was created from Thompson's construction.
     (a) What was the original regular expression?  You answer may
         contain only letters from the NFA, and some collection of the
         symbols \epsilon, |, (, ), and *.  Use as few parentheses as
         possible.  [1pt]
     (b) Fill in the table showing the \epsilon-closure foreach state.
         [2pt]
     (c) Using the subset construction, draw the equivalent DFA.  Do
         not minimize.  Draw your anwer below the NFA.  In each state
         of the DFA, write the corresponding states from the NFA.
         [2pt]
     (d) Draw a third diagram showing a minimized DFA.  Do your
         scratch work elsewhere and show only the final answer.  Use
         any algorithm (or guesswork) that you like.  [1pt]

    +--------+--------------------------+ (a) Original regex:
    |state s | (b) \epsilon-closure (s) |
    +--------+--------------------------+ .PS 3.2i
    |   1    |                          | arrowwid=0.1
    +--------+--------------------------+ arrowht=0.2
    |   2    |                          | x=movewid*1.4
    +--------+--------------------------+ xx=2*x
    |   3    |                          | a2=0.7071*xx
    +--------+--------------------------+ S1: circle "1"
    |   4    |                          | S2: circle "2" at S1+(xx,0)
    +--------+--------------------------+ S3: circle "3" at S2+(a2,a2)
    |   5    |                          | S4: circle "4" at S3+(xx,0)
    +--------+--------------------------+ S5: circle "5" at S2+(a2,-a2)
    |   6    |                          | S6: circle "6" at S5+(xx,0)
    +--------+--------------------------+ S7: circle "7" at S2+(a2+xx+a2,0)
    |   7    |                          | S8: circle "8" at S7+(xx,0)
    +--------+--------------------------+ S9: circle "9" at S8+(xx,0)
    |   8    |                          | circle rad circlerad*.75 at S9
    +--------+--------------------------+ arrow from S1+(-xx,0) to S1 chop
    |   9    |                          | arrow "\[*e]" above from S1 to S2 chop
    +--------+--------------------------+ arrow "\[*e]" above from S2 to S3 chop
    |        |                          | arrow "x" above from S3 to S4 chop
    |        |                          | arrow "\[*e]" above from S4 to S7 chop
    |        |                          | arrow "\[*e]" above from S2 to S5 chop
    |        |                          | arrow "z" above from S5 to S6 chop
    |        |                          | arrow "\[*e]" above from S6 to S7 chop
    |        |                          | arrow "z" above from S7 to S8 chop
    |        |                          | arrow "\[*e]" above from S8 to S9 chop
    |        |                          | spline from S8.nw then to S4+(x,x) then to S3+(-x,x) then to S2.n ->
    |        |                          | "\[*e]" at S3+(x,x*1.3)
    |        |                          | spline from S1.se then to S5+(-x,-x) then to S6+(xx,-x) then to S9.sw ->
    |        |                          | "\[*e]" at S5+(x,-x*.7)
    |        |                          | .PE
    |        |                          |
    |        |                          | (c) DFA (do not minimize):

    (d) Minimized DFA:

 5. Using bison, write an unambiguous grammar defining a thunk to be a
    sequence of one or more bug connected by operators, either '+' or
    '*', both of which are right associative.  A bug is a sequence of
    one or more IDENT connected by the AND operator, which is left
    associative and has a higher priority than the others.  Do not
    show semantic actions.  [2pt]

    %token IDENT AND
    %start thunk
    %%

 6. Using flex, define the following tokens.  Do not define, assume,
    or use macros.  [2pt]

     (i) A string which begins with either a double quote (") or a
         single quote (') followed by any number of characters not
         including newline up to another quote mark.  The trailing
         quote must be the same as the opening quote, and the bounding
         quotes may not appear within the string.

    (ii) A floating point number whose fractional part begins and ends
         with a decimal digit and possibly contains an optional
         decimal point (.) within.  It is followed by an optional
         exponent, which consists of the upper case letter E, an
         optional sign, and one or more decimal digits.

Multiple choice.  To the left of each question, write the letter that
indicates your answer.  Write Z if you don't want to risk a wrong
answer.  Wrong answers are worth negative points.  [11pt]

+--------------------------+------+------+------------+
|number of                 |      |× 1 = |      $= a$ |
|correct answers           |      |      |            |
+--------------------------+------+------+------------+
|number of                 |      |× ½ = |      $= b$ |
|wrong answers             |      |      |            |
+--------------------------+------+------+------------+
|number of                 |      |× 0 = |  0         |
|missing answers           |      |      |            |
+--------------------------+------+------+------------+
|column total              |   11 |      |      $= c$ |
|$ c = max ( a - b , 0 ) $ |      |      |            |
+--------------------------+------+------+------------+

 1. Which of the following flex regexes will match either an a;  or,
    alternatively, a b followed by a c?
    (A) a*bc
    (B) a+bc
    (C) a?bc
    (D) a|bc

 2. If a function returns a uint32_t, the actual possible range of
    values is:
    (A) $ - 2 sup 31 $ to $ 2 sup 31 - 1 $
    (B) $ 0 $ to $ 2 sup 32 - 1 $
    (C) $ 0 $ to $ 31 $
    (D) $ 1 $ to $ 2 sup 32 $

 3. Putting reserved words into a flex grammar instead of embedding
    them in the string table make the DFA use:
    (A) less CPU time
    (B) less memory
    (C) more CPU time
    (D) more memory

 4. Which one of the following flex actions is obviously wrong?
    (A) return "=";
    (B) return '=';
    (C) return *yytext;
    (D) return EQ;

 5. Compiling following C program and then running a.out will print
    what?  (Choose the most reasonable answer.)
       void main () {
          printf ("%p\n", main);
       }
    (A) 0x4004f0
    (B) Segmentation fault (core dumped)
    (C) UHìHÇÆð@
    (D) a.out: Command not found.

 6. If the expression (a*((b+c)+d)) retains the same meaning with
    parentheses removed, that means that the operators are
    (a)-associative and that * has a (b) precedence than +.
    (A) (a) = left, (b) = higher
    (B) (a) = left, (b) = lower
    (C) (a) = right, (b) = higher
    (D) (a) = right, (b) = lower

 7. The flex regex ab+|c means the same as:
    (A) ((ab)+)|c
    (B) (a(b+))|c
    (C) (ab)(\+|c)
    (D) a((b+)|c)

 8. Which grammar is unambiguous, matches an arbitrarily large number
    of terminal symbols, and uses up the smallest amount of stack
    space when doing so?
    (A) A -> A A
        A -> y
    (B) A -> A x
        A -> y
    (C) A -> x A
        A -> y
    (D) A -> x x
        A -> y

 9. Which grammar will accept a single y followed by an arbitrarily
    large number of xs?
    (A) A -> A x
        A -> y
    (B) A -> A y
        A -> x
    (C) A -> x A
        A -> y
    (D) A -> y A
        A -> x

10. A parser uses what level of grammar in the Chomsky hierarchy?
    (A) recursively enumerable
    (B) context sensitive
    (C) context free
    (D) regular

11. The fact that int is a keyword, not an identifier, is determined
    by:
    (A) lexical analyzer
    (B) parser
    (C) symbol table module
    (D) code generator

